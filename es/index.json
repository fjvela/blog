[{"content":"En algunas ocasiones hemos necesitado obtener la información del tráfico de entrada y salida (HTTP request / HTTP response) de nuestras aplicaciones ASP.NET core. Hasta la versión 6 de .NET era necesario escribir nuestro propio middleware. En esta versión, Microsoft ha incluido un middleware para poder loguear la siguiente información:\n HTTP request HTTP response Headers Common properties Body  ¡Advertencia! El middleware HTTP logging puede afectar al rendimiento de la aplicación, también debes tener en cuenta que se puede mostrar información sensible de tu aplicación.\n¡Advertencia! Cuando se configura el middleware para loguear todas las cabederas de respuesta no se realiza de manera correcta, el bug ya había sido reportado y puedes comprobar el estado en el siguiente enlace: https://github.com/dotnet/aspnetcore/issues/36920\n¿Como habilitar HTTP logging? El método UseHttpLogging de la extensión HttpLoggingBuilderExtensions permite habilitar el middleware. Si necesitas que el formato de los logs tengan formato W3C utiliza el método UseW3CLogging.\npublic void Configure(IApplicationBuilder app, IWebHostEnvironment env) { app.UseHttpLogging(); app.UseRouting(); app.UseEndpoints(endpoints =\u0026gt; { endpoints.MapGet(\u0026#34;/\u0026#34;, async context =\u0026gt; { await context.Response.WriteAsync(\u0026#34;Hello World!\u0026#34;); }); }); } Si utilizas minimal APIs\nvar builder = WebApplication.CreateBuilder(args); // Add services to the container.  builder.Services.AddControllers(); // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle builder.Services.AddEndpointsApiExplorer(); builder.Services.AddSwaggerGen(); var app = builder.Build(); app.UseHttpLogging(); // Configure the HTTP request pipeline. if (app.Environment.IsDevelopment()) { app.UseSwagger(); app.UseSwaggerUI(); } app.UseHttpsRedirection(); app.UseAuthorization(); app.MapControllers(); app.Run(); Modifica el nivel de log Microsoft.AspNetCore.HttpLogging en el fichero de configuración appsettings.json.\n{ \u0026#34;Logging\u0026#34;: { \u0026#34;LogLevel\u0026#34;: { \u0026#34;Default\u0026#34;: \u0026#34;Information\u0026#34;, \u0026#34;Microsoft.AspNetCore\u0026#34;: \u0026#34;Information\u0026#34;, \u0026#34;Microsoft.AspNetCore.HttpLogging\u0026#34;: \u0026#34;Information\u0026#34;, } }, \u0026#34;AllowedHosts\u0026#34;: \u0026#34;*\u0026#34; } Por defecto mostrará la siguiente información:\ninfo: Microsoft.AspNetCore.HttpLogging.HttpLoggingMiddleware[1] Request: Protocol: HTTP/2 Method: GET Scheme: https PathBase: Path: /WeatherForecast Accept: text/plain Host: localhost:7126 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:94.0) Gecko/20100101 Firefox/94.0 :method: [Redacted] Accept-Encoding: gzip, deflate, br Accept-Language: en,es-ES;q=0.8,es;q=0.5,en-US;q=0.3 Cookie: [Redacted] Referer: [Redacted] TE: trailers DNT: 1 sec-fetch-dest: [Redacted] sec-fetch-mode: [Redacted] sec-fetch-site: [Redacted] Opciones de configuración personalizadas Puedes realizar una configuración personalizada utilizando el método AddHttpLogging:\npublic void ConfigureServices(IServiceCollection services) { services.AddHttpLogging(logging =\u0026gt; { // Customize HTTP logging here.  logging.LoggingFields = HttpLoggingFields.All; logging.RequestHeaders.Add(\u0026#34;My-Request-Header\u0026#34;); logging.ResponseHeaders.Add(\u0026#34;My-Response-Header\u0026#34;); logging.MediaTypeOptions.AddText(\u0026#34;application/javascript\u0026#34;); logging.RequestBodyLogLimit = 4096; logging.ResponseBodyLogLimit = 4096; }); } Si utilizas minimal APIs\nvar builder = WebApplication.CreateBuilder(args); // Add services to the container.  builder.Services.AddControllers(); // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle builder.Services.AddEndpointsApiExplorer(); builder.Services.AddSwaggerGen(); builder.Services.AddHttpLogging(options =\u0026gt; { // Customize HTTP logging here.  options.LoggingFields = Microsoft.AspNetCore.HttpLogging.HttpLoggingFields.All; options.RequestHeaders.Add(\u0026#34;My-Request-Header\u0026#34;); options.ResponseHeaders.Add(\u0026#34;My-Response-Header\u0026#34;); options.MediaTypeOptions.AddText(\u0026#34;application/javascript\u0026#34;); options.RequestBodyLogLimit = 4096; options.ResponseBodyLogLimit = 4096; }); var app = builder.Build(); app.UseHttpLogging(); // Configure the HTTP request pipeline. if (app.Environment.IsDevelopment()) { app.UseSwagger(); app.UseSwaggerUI(); } app.UseHttpsRedirection(); app.UseAuthorization(); app.MapControllers(); app.Run();  LoggingFields: Te permite configurar que elementos se van a loguear. Por ejemplo el flag LoggingFields.RequestProtocol solo mostrará el protocolo utilizado en la petición. RequestHeaders: Logueará aquellos request headers que estén incluidos en la lista. ResponseHeaders: Logueará aquellas response headers que estén incluidos en la lista. RequestBodyLogLimit: Tamaño máximo del body a loguear de la petición. Valor por defecto: 32 KB. RequestBodyLogLimit: Tamaño máximo del body a loguear de la respuesta. Valor por defecto: 32 KB.  Rendimiento A tráves de una pequeña prueba de carga con artillery podemos comparar el rendimiento de nuestra aplicación con y sin el middleware HttpLogging. A continuación podemos comprobar los resultados.\nSin middleware -------------------------------- Summary report -------------------------------- vusers.created_by_name.Get weather forecast: ................ 7754 vusers.created.total: ....................................... 7754 vusers.completed: ........................................... 7754 vusers.session_length: min: ...................................................... 3.7 max: ...................................................... 78.5 median: ................................................... 8.2 p95: ...................................................... 21.1 p99: ...................................................... 32.1 http.request_rate: .......................................... 76/sec http.requests: .............................................. 15508 http.codes.307: ............................................. 7754 http.responses: ............................................. 7754 http.response_time: min: ...................................................... 0 max: ...................................................... 67 median: ................................................... 3 p95: ...................................................... 15 p99: ...................................................... 25.8 expect.ok: .................................................. 7754 expect.ok.statusCode: ....................................... 7754 errors.UNABLE_TO_VERIFY_LEAF_SIGNATURE: ..................... 7754 Con middleware -------------------------------- Summary report -------------------------------- vusers.created_by_name.Get weather forecast: ................ 3166 vusers.created.total: ....................................... 3166 vusers.completed: ........................................... 3164 vusers.session_length: min: ...................................................... 7.9 max: ...................................................... 2308.1 median: ................................................... 43.4 p95: ...................................................... 1064.4 p99: ...................................................... 1790.4 http.request_rate: .......................................... 36/sec http.requests: .............................................. 6330 http.codes.307: ............................................. 3164 http.responses: ............................................. 3164 http.response_time: min: ...................................................... 4 max: ...................................................... 2294 median: ................................................... 37.7 p95: ...................................................... 1064.4 p99: ...................................................... 1790.4 expect.ok: .................................................. 3164 expect.ok.statusCode: ....................................... 3164 errors.UNABLE_TO_VERIFY_LEAF_SIGNATURE: ..................... 3164  Referencias  https://devblogs.microsoft.com/aspnet/asp-net-core-updates-in-net-6-preview-4/?WT.mc_id=DT-MVP-5004074#http-logging-middleware https://docs.microsoft.com/en-us/aspnet/core/fundamentals/http-logging/?view=aspnetcore-6.0 https://github.com/fjvela/netcore6-examples/tree/main/HttpLoggingMiddlewareSample  ","permalink":"https://fjvela.github.io/es/posts/2021/net-core-6/es/asp.net-core-6-httploggin-logrequests-logresponses/","summary":"En algunas ocasiones hemos necesitado obtener las información del tráfico de entrada y salida (HTTP request / HTTP response) de nuestras aplicaciones ASP.NET core. Hasta la versión 6 de .NET era necesario escribir nuestro propio middleware. En esta versión, Microsoft ha incluido un middleware para poder loguear esta información.","title":"ASP.NET Core 6 - HttpLogging (log request/responses)"},{"content":".NET MAUI .NET MAUI Community Toolkit acepta contribuciones de la comunidad Microsoft lanzó en agosto la primera versión .NET MAUI Community Toolkit, desde este mes ya aceptan contribuciones por parte de la comunidad.\nLeer más: https://devblogs.microsoft.com/dotnet/contributing-to-net-maui-community-toolkit/ \nKubernetes Fin soporte k8s 1.19 El pasado 28 de octubre finalizó el periodo de soporte de la versión 1.19 de kubernetes, recuerda que para recibir soporte por parte de los proveedores cloud deberás estar utilizando una versión actualizada.\nLeer más: https://kubernetes.io/releases/patch-releases/#1-19 \nkubectl 1.23 incluirá un nuevo comando para manejar eventos: \u0026lsquo;kubectl events\u0026rsquo; La versión 1.23 de kubectl (kubernetes CLI) incluirá una primera versión del nuevo comando events. El comando intentará mejorar el manejo de eventos del clúster y solucionará las carencias del comando \u0026lsquo;kubectl get events\u0026rsquo;\nLeer más: https://github.com/kubernetes/kubernetes/pull/99557\nComo Linkerd ha impolementado la política de reintentos de peticiones HTTP que contienen body La semana pasada comentábamos el lanzamiento de Linkerd 2.21, esta nueva versión incluye una política de reintentos de peticiones HTTP que contienen body. Linkerd nos explica como han realizado esta implementación.\nLeer más: https://linkerd.io/2021/10/26/how-linkerd-retries-http-requests-with-bodies/ \nAzure Azure funtions incluye nuevos bindings y triggers La última versión de Azure SDK incluye nuevos bindings y triggers para Azure functions:\n Azure Blob Azure Queue Azure Event Hubs Azure Service Bus Azure Event Grid  Leer más: https://azure.microsoft.com/en-us/updates/general-availability-azure-functions-extensions-for-blobs-queues-event-hubs-service-bus-and-event-grid/ \nEventos Monkey Conf 2021 Cuarta edición de la Monkey Conf, uno de los grandes eventos del año centrado en tecnología C#. Este año se seguirá celebrando online el próximo 1 de diciembre. C4P: https://sessionize.com/monkeyconf2021\nLeer más: https://javiersuarezruiz.wordpress.com/2021/10/27/monkey-conf-2021/ \nDaprCon Durante los días 19 y 20 de octubre se celebró DaprCon, primer gran evento dedicado exclusivamente a Dapr\nLeer más:\n https://blog.dapr.io/posts/2021/10/21/thanks-for-a-great-first-daprcon/ https://blog.dapr.io/posts/2021/10/05/join-us-for-daprcon-october-19th-20th-2021/ Playlist día 1: https://www.youtube.com/watch?v=7ax-ltJjM58 Playlist día 2: https://www.youtube.com/watch?v=0y7ne6teHT4   Otros GitHub CLI 2.2.0 GitHub libera la versión 2.2.0 de su aplicación de línea de comandos (CLI - command line interface), su mayor novedad es que permite gestionar GitHub Codespaces.\nLeer más: https://github.com/cli/cli/releases/tag/v2.2.0 \nHerramientas testing funcional Francisco Moreno ha compartido en twitter las herramientas de testing funcional que suele utilizar.\n Mailinator  Mailtrap  JSonServer  Mocky Mockbin Mockaroo Generador DNI BugMagnet FakeData Nimbus Exploratory Testing Chrome Extension Fiddler WebPageTest OWASP Zap  Leer más: https://twitter.com/morvader/status/1452584938482634757 \n","permalink":"https://fjvela.github.io/es/posts/2021/weekly/weekly-44/","summary":".NET MAUI Community Toolkit acepta contribuciones de la comunidad, fin soporte k8s 1.19, azure functions, Monkey Conf 2021, DaprCon, Github CLI y herramientas testing funcional","title":"Algunas noticias de la semana 44"},{"content":"dotnet Microsoft elimina hot reload en .NET SDK 6 El 20 de octubre Microsoft publicó el siguiente post https://devblogs.microsoft.com/dotnet/update-on-net-hot-reload-progress-and-visual-studio-2022-highlights/ indicando que iba a centrarse a dar soporte a la funcionalidad hot reload (permite editar el código fuente de tu aplicación mientras se está ejecutando) en Visual Studio 2022.\nMicrosoft eliminó la opción hot reload del .NET SDK (pull request https://github.com/dotnet/sdk/pull/22217) por lo que los desarrolladores ya no podrían hacer uso a través de la línea de comandos y pasando a estar disponible únicamente para los desarrolladores que utilicen Visual Studio 2022.\nEste cambio no ha sido bien recibido por la comunidad y ha pedido que vuelva a estar incluida en .NET 6 (pull request https://github.com/dotnet/sdk/pull/22262). Finalmente, Microsoft ha vuelto a incluir la funcionalidad y estará disponible en .NET 6 también ha pedido disculpas en el post: https://devblogs.microsoft.com/dotnet/net-hot-reload-support-via-cli \nNovedades EF en .NET 6 Entity Framework (EF) introduce varias novedades en su próxima release:\n Uso de tablas temporales en SQL Server Nuevos métodos para consultar datos históricos Mejoras en la ejecución de actualizaciones de base de datos Modelos compilados Mejora rendimiento  Leer más: https://docs.microsoft.com/en-us/ef/core/what-is-new/ef-core-6.0/whatsnew \nEjemplos migración ASP.NET Core 5.0 a 6.0 En el siguiente enlace https://docs.microsoft.com/en-us/aspnet/core/migration/50-to-60-samples?view=aspnetcore-5.0 tienes disponibles varios ejemplos de cómo migrar tu aplicación ASP.NET 5.0 a 6.0 para aprovechar las últimas novedades de ASP.NET Core en tú aplicación.\n.NET MAUI LLega Windows subsystem para Android (WSA) Windows subsytem para Android (WSA) llega para sustituir a los emuladores Android a la hora de depurar nuestras aplicaciones moviles para Android. Su funcionamiento es similar a WSL (Windows subsystem for linux) y mejorará considerablemente la experiencia de los desarrolladores a la hora de depurar y probar aplicaciones Android.\nPor el momento solo está disponible a tráves del programa Windows Insider.\nLeer más: https://montemagno.com/goodbye-android-emulators-windows-subsytem-for-android-is-here/ \nVideo novedades.NET MAUI Preview 9 Revisa todas las novedades de la última preview de .NET MAUI de la mano de James Montemagno: https://www.youtube.com/watch?v=BurpEcTsQbU \nKubernetes CVE-2021-25742: Ingress-NGINX Si estás utilizando NGINX como ingress controller en tu clúster kubernetes, deberías actualizar lo antes posible: https://groups.google.com/g/kubernetes-security-announce/c/mT4JJxi9tQY \nLinkerd 2.21 Llega la versión 2.21 de Linkerd (service mesh):\n Políticas de autorización entre servicios Políticas de reintentos para petciones HTTP que incluyen body Reducción despliegue  Leer más: https://linkerd.io/2021/09/30/announcing-linkerd-2.11 \nEventos Netcoreconf 2021 Durante los días 9 y 20 de octubre se celebró Netcoreconf 2021. Uno de los eventos técnicos más importantes del año sobre .NET Core, cloud, Xamarin, IA, data o Visual Studio. Este año debido a la pandemia se celebró online, tienes disponibles todas las charlas en su página web: https://netcoreconf.com/ \nAll day devops All day devops es uno de los mayores eventos mundiales sobre devops, se celebrará el próximo 28 de octubre online y se podrá ver a 180 ponentes hablar sobre: CI/CD, transformación cultural, DevSecOps, gobernanza, infrastructura o SRE.\nLeer más: https://www.alldaydevops.com/ \nOtros Visual Studio 2022 renueva su interfaz de usuario Microsoft ha actualizado la interfaz de usuario en Visual Studio 2022 que será lanzado en las próximas semanas:\n Creación y selección de temas personalizados Mejoras en la accesibilidad de la aplicación Nuevos colores Nueva iconografía  Leer más: https://devblogs.microsoft.com/visualstudio/weve-upgraded-the-ui-in-visual-studio-2022/ \n","permalink":"https://fjvela.github.io/es/posts/2021/weekly/weekly-43/","summary":"Noticias sobre dotnet, .NET MAUI, kubernetes, eventos","title":"Algunas noticias de la semana 43"}]